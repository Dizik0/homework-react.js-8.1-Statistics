{"version":3,"sources":["Components/Statistic/Statistic.js","Components/FeadbackOption/FeadbackOption.js","Components/Notification/Notification.js","Components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Statistic","statistic","Good","Neutral","Bad","total","countPositiveFeedbackPercentage","propTypos","PropTypes","number","isRequired","func","FeadbackOption","options","btnOption","map","mood","onClick","uuidv4","Notification","message","Section","useState","setGood","setNeutral","setBad","countTotalFeedback","preview","console","log","Math","trunc","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PACaA,EAAY,SAAC,GAInB,IAAD,IAHJC,UAAaC,EAGT,EAHSA,KAAMC,EAGf,EAHeA,QAASC,EAGxB,EAHwBA,IAC5BC,EAEI,EAFJA,MACAC,EACI,EADJA,gCAEA,OACE,gCACE,4CACA,+BACE,uCACO,+BAAOJ,OAEd,yCACS,+BAAOC,OAEhB,qCACK,+BAAOC,OAEZ,uCAEE,+BAAOC,OAET,mDAEE,iCAAOC,EAAP,iBAOVN,EAAUO,UAAY,CACpBL,KAAMM,YAAUC,OAAOC,WACvBP,QAASK,YAAUC,OAAOC,WAC1BN,IAAKI,YAAUC,OAAOC,WACtBJ,gCAAiCE,YAAUG,KAAKD,WAChDL,MAAOG,YAAUG,KAAKD,Y,YCnCXE,EAAiB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACxC,OACE,mCACGA,EAAUC,KAAI,SAACC,GAAD,OACb,wBAAuBC,QAASJ,EAAQG,GAAxC,SACGA,GADUE,qBCNRC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,4BAAIA,KCKAC,EAAU,WACrB,MAAwBC,mBAAS,GAAjC,mBAAOpB,EAAP,KAAaqB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOnB,EAAP,KAAgBqB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOlB,EAAP,KAAYqB,EAAZ,KAEMC,EAAqB,kBAAMxB,EAAOC,EAAUC,GAsBlD,OACE,qCACE,uDACA,cAAC,EAAD,CACES,QArBc,SAACc,GAAD,OAAa,WAC/B,OAAQA,GACN,IAAK,OACHJ,EAAQrB,EAAO,GACf,MACF,IAAK,UACHsB,EAAWrB,EAAU,GACrB,MACF,IAAK,MACHsB,EAAOrB,EAAM,GACb,MAEF,QACEwB,QAAQC,IAAI,YASZf,UAAW,CAAC,OAAQ,UAAW,SAEP,IAAzBY,IACC,cAAC,EAAD,CACEzB,UAAW,CAAEC,OAAMC,UAASC,OAC5BC,MAAOqB,IACPpB,gCA9BNwB,KAAKC,MAAc,IAAP7B,EAAcwB,OAiCtB,cAAC,EAAD,CAAcN,QAAS,0BCrChBY,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da4ee33d.chunk.js","sourcesContent":["import { PropTypes } from \"prop-types\";\r\nexport const Statistic = ({\r\n  statistic: { Good, Neutral, Bad },\r\n  total,\r\n  countPositiveFeedbackPercentage,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      <ul>\r\n        <li>\r\n          Good <span>{Good}</span>\r\n        </li>\r\n        <li>\r\n          Neutral<span>{Neutral}</span>\r\n        </li>\r\n        <li>\r\n          Bad<span>{Bad}</span>\r\n        </li>\r\n        <li>\r\n          total\r\n          <span>{total}</span>\r\n        </li>\r\n        <li>\r\n          Positive feedback\r\n          <span>{countPositiveFeedbackPercentage}%</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistic.propTypos = {\r\n  Good: PropTypes.number.isRequired,\r\n  Neutral: PropTypes.number.isRequired,\r\n  Bad: PropTypes.number.isRequired,\r\n  countPositiveFeedbackPercentage: PropTypes.func.isRequired,\r\n  total: PropTypes.func.isRequired,\r\n};\r\n","import { PropTypes } from \"prop-types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nexport const FeadbackOption = ({ options, btnOption }) => {\r\n  return (\r\n    <>\r\n      {btnOption.map((mood) => (\r\n        <button key={uuidv4()} onClick={options(mood)}>\r\n          {mood}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nFeadbackOption.propTypes = {\r\n  options: PropTypes.func.isRequired,\r\n  btnOption: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n","export const Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n","import { useState } from \"react\";\r\n\r\nimport { Statistic } from \"../Statistic\";\r\nimport { FeadbackOption } from \"../FeadbackOption\";\r\nimport { Notification } from \"../Notification\";\r\n\r\nexport const Section = () => {\r\n  const [Good, setGood] = useState(0);\r\n  const [Neutral, setNeutral] = useState(0);\r\n  const [Bad, setBad] = useState(0);\r\n\r\n  const countTotalFeedback = () => Good + Neutral + Bad;\r\n\r\n  const countPositiveFeedbackPercentage = () =>\r\n    Math.trunc((Good * 100) / countTotalFeedback());\r\n\r\n  const eventCather = (preview) => () => {\r\n    switch (preview) {\r\n      case \"Good\":\r\n        setGood(Good + 1);\r\n        break;\r\n      case \"Neutral\":\r\n        setNeutral(Neutral + 1);\r\n        break;\r\n      case \"Bad\":\r\n        setBad(Bad + 1);\r\n        break;\r\n\r\n      default:\r\n        console.log(\"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Please leave feadback</h1>\r\n      <FeadbackOption\r\n        options={eventCather}\r\n        btnOption={[\"Good\", \"Neutral\", \"Bad\"]}\r\n      />\r\n      {countTotalFeedback() !== 0 ? (\r\n        <Statistic\r\n          statistic={{ Good, Neutral, Bad }}\r\n          total={countTotalFeedback()}\r\n          countPositiveFeedbackPercentage={countPositiveFeedbackPercentage()}\r\n        />\r\n      ) : (\r\n        <Notification message={\"No feedback given\"}></Notification>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { Section } from \"./Components/Section\";\nfunction App() {\n  return (\n    <div>\n      <Section />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}